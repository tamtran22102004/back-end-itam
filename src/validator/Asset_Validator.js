const { body, param } = require("express-validator");
const db = require("../config/database");
const AppError = require("../utils/AppError");

/**
 * ‚úÖ Ki·ªÉm tra gi√° tr·ªã unique trong DB
 */
const checkUnique = async (field, value, excludeId = null) => {
  if (!value) return; // b·ªè qua n·∫øu kh√¥ng c√≥ gi√° tr·ªã
  const sql = excludeId
    ? `SELECT ID FROM Asset WHERE ${field} = ? AND ID != ? LIMIT 1`
    : `SELECT ID FROM Asset WHERE ${field} = ? LIMIT 1`;

  const [rows] = excludeId
    ? await db.execute(sql, [value, excludeId])
    : await db.execute(sql, [value]);

  if (rows.length > 0) {
    throw new AppError(`${field} "${value}" ƒë√£ t·ªìn t·∫°i`, 400);
  }
};

/**
 * üü¢ Validator cho CREATE
 */
const createAssetValidator = [
  body("ManageCode")
    .notEmpty()
    .withMessage("M√£ qu·∫£n l√Ω n·ªôi b·ªô l√† b·∫Øt bu·ªôc")
    .isLength({ max: 50 })
    .withMessage("M√£ n·ªôi b·ªô kh√¥ng qu√° 50 k√Ω t·ª±")
    .custom(async (value) => {
      await checkUnique("ManageCode", value);
      return true;
    }),

  body("AssetCode")
    .optional({ nullable: true })
    .isLength({ max: 50 })
    .withMessage("M√£ t√†i s·∫£n k·∫ø to√°n kh√¥ng qu√° 50 k√Ω t·ª±")
    .custom(async (value) => {
      await checkUnique("AssetCode", value);
      return true;
    }),

  body("PurchaseId")
    .optional({ nullable: true })
    .isLength({ max: 100 })
    .withMessage("M√£ phi·∫øu mua kh√¥ng qu√° 100 k√Ω t·ª±")
    .custom(async (value) => {
      await checkUnique("PurchaseId", value);
      return true;
    }),

  body("Name").notEmpty().withMessage("T√™n thi·∫øt b·ªã l√† b·∫Øt bu·ªôc"),

  body("CategoryID")
    .notEmpty()
    .withMessage("Danh m·ª•c l√† b·∫Øt bu·ªôc")
    .isString()
    .withMessage("CategoryID ph·∫£i l√† chu·ªói"),

  body("ItemMasterID")
    .optional({ nullable: true })
    .isString()
    .withMessage("ItemMasterID ph·∫£i l√† chu·ªói"),

  body("VendorID")
    .optional({ nullable: true })
    .isString()
    .withMessage("VendorID ph·∫£i l√† chu·ªói"),

  body("Quantity")
    .isInt({ min: 1 })
    .withMessage("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng"),

  body("Status")
    .isInt({ min: 1, max: 6 })
    .withMessage("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"),

  body("PurchasePrice")
    .optional({ nullable: true })
    .isFloat({ min: 0 })
    .withMessage("Gi√° mua ph·∫£i >= 0"),

  body("WarrantyMonth")
    .optional({ nullable: true })
    .isInt({ min: 0 })
    .withMessage("S·ªë th√°ng b·∫£o h√†nh ph·∫£i >= 0"),
];

/**
 * üü° Validator cho UPDATE
 */
const updateAssetValidator = [
  param("id").notEmpty().withMessage("Thi·∫øu ID Asset trong URL"),
  body("ManageCode")
    .notEmpty()
    .withMessage("M√£ qu·∫£n l√Ω n·ªôi b·ªô l√† b·∫Øt bu·ªôc")
    .custom(async (value, { req }) => {
      await checkUnique("ManageCode", value, req.params.id);
      return true;
    }),
  body("AssetCode")
    .optional({ nullable: true })
    .custom(async (value, { req }) => {
      await checkUnique("AssetCode", value, req.params.id);
      return true;
    }),
  body("PurchaseId")
    .optional({ nullable: true })
    .custom(async (value, { req }) => {
      await checkUnique("PurchaseId", value, req.params.id);
      return true;
    }),
  body("Name").notEmpty().withMessage("T√™n thi·∫øt b·ªã l√† b·∫Øt bu·ªôc"),
  body("Quantity")
    .isInt({ min: 1 })
    .withMessage("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng"),
  body("Status")
    .isInt({ min: 1, max: 6 })
    .withMessage("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"),
];

const AssetValidator = {createAssetValidator,updateAssetValidator}
module.exports = AssetValidator;

